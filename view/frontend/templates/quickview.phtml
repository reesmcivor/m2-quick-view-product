
<!-- Alpine.js component with modal -->
<div x-data="quickViewProduct()" x-init="init()" x-ref="quickview" class="fixed top-0 right-0" style="z-index: 1000; max-width: 500px;">


    <?php

    /** @var \Magento\Framework\Escaper $escaper */
    /** @var \Hyva\Theme\Model\ViewModelRegistry $viewModels */
    /** @var \Hyva\Theme\ViewModel\Modal $modalViewModel */
    $modalViewModel = $viewModels->require(\Hyva\Theme\ViewModel\Modal::class);

    ?>

    <div x-data="hyva.modal()">
        <?= $modalViewModel->createModal()->withContent(<<<END_OF_CONTENT

<div class="flex flex-col md:flex-row gap-5">
    <div class="flex-1">
        <h3 x-show="product.name" x-text="product.name" class="text-2xl font-semibold mb-2"></h3>
        <div x-html="product.short_description"></div>
        <img :src="product.image" alt="" x-show="product.image">
    </div>
    <div class="flex-1" x-show="product.specifications">
        <h3 class="text-2xl font-semibold mb-2">Specification</h3>
        <ul>
            <template x-for="(value, key) in product.specifications" :key="key">
                <li><strong x-text="value.label"></strong>: <span x-text="value.value"></span></li>
            </template>
        </ul>
    </div>
</div>

<div class="mt-20 flex justify-between gap-2">
<button @click="hide" type="button" class="btn btn-primary">
    {$escaper->escapeHtml(__('Close'))}
</button>
</div>

END_OF_CONTENT
        )->positionCenter()
            ->withDialogRefName('my-modal')
            ->withAriaLabelledby('the-label')
            ->addDialogClass('border', 'border-10', 'border-blue-800', 'md:max-w-xl lg:max-w-5xl max-w-full')
        ?>
    </div>
</div>

<script>
    function quickViewProduct() {
        return {
            product: {
                name: 'Product Title',
                description: 'Description',
                specifications: null
            },
            showModal: false,
            preloadData: {},
            fetchProductData(sku, trigger, preload = false) {
                // Fetch product data and either preload it or set it as current product
                fetch('/quickviewproduct/index/view?sku=' + sku)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            this.preloadData[sku] = data.product;
                            if(!preload) {
                                this.product = data.product;
                                //this.showModal = true;
                                window.dispatchEvent(
                                    new CustomEvent('hyva-modal-show', {detail: {dialog: 'my-modal'}})
                                );

                            }


                            try {
                                //trigger.removeClass('loading');
                                // remove loading from all class's that have quick-product-view
                                document.querySelectorAll('.quick-product-view').forEach(function (element) {
                                    element.classList.remove('loading');
                                });

                            } catch (e) {

                            }


                        } else {
                            console.error('Error:', data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching product data:', error);
                    });
            },
            preloadProduct(sku, trigger) {
                this.fetchProductData(sku, trigger, true);
            },
            loadProductData(sku, trigger) {
                if (this.preloadData[sku]) {
                    this.product = this.preloadData[sku];
                    this.showModal = true;
                } else {
                    this.fetchProductData(sku, trigger, false);
                }
            },
            closeModal() {
                this.showModal = false;
            },
            init() {
                window.quickViewProductComponent = this;
            }
        };
    }

    // Global function to show product in quick view
    window.showQuickViewProduct = function(event, sku) {

        event.preventDefault();

        let trigger = this;
        trigger.addClass("loading");

        if (window.quickViewProductComponent) {
            window.quickViewProductComponent.loadProductData(sku, trigger, false);
        } else {
            console.error('Quick view component is not initialized.');
        }
    }

    window.preloadQuickViewProducts = function(skus) {
        if (window.quickViewProductComponent) {
            //skus.forEach(sku => window.quickViewProductComponent.preloadProduct(sku));
        } else {
            console.error('Quick view component is not initialized.');
        }
    }

    function handleProductViewClick(event)
    {
        event.preventDefault();
        event.stopPropagation()

        let sku = this.getAttribute('data-sku');
        let trigger = this;

        trigger.classList.add("loading");

        if (window.quickViewProductComponent) {
            window.quickViewProductComponent.loadProductData(sku, trigger);
        } else {
            console.error('Quick view component is not initialized.');
        }
    }

    // Attach the event handler to all elements with the class 'quick-product-view'.
    document.addEventListener('DOMContentLoaded', function() {
        var productViewElements = document.getElementsByClassName('quick-product-view');
        Array.from(productViewElements).forEach(function (element) {
            element.addEventListener('click', handleProductViewClick);
        });
    });

</script>

<style>
    .quick-product-view svg {
        border: none;
    }
    .quick-product-view.loading {
        animation: pulse 2s infinite;
    }
    @keyframes pulse {
        0%, 100% {
            transform: scale(1);
            opacity: 1;
        }
        50% {
            transform: scale(1.25);
            opacity: 0.7;
        }
    }
</style>


